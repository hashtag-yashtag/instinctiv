{"ast":null,"code":"import _classCallCheck from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/yash/instinctiv/instinctiv/src/components/Checkout/index.js\";\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\nimport \"./checkout.css\";\n\nvar Checkout =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Checkout, _React$Component);\n\n  function Checkout(props) {\n    var _this;\n\n    _classCallCheck(this, Checkout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Checkout).call(this, props));\n\n    _this.onToken = function (description) {\n      return function (token, args) {\n        var t = _this.props.stripe.createToken();\n\n        console.log(token);\n        axios.post('3RD_PARTY_SERVER', {\n          description: description,\n          source: token.id,\n          amount: _this.state.value,\n          metadata: args\n        }).then(function () {\n          var token = _this.props.stripe.createToken();\n\n          console.log(token);\n        }).catch(function () {\n          _this.errorPayment();\n        }); // TODO: Send the token information and any other\n        // relevant information to your payment process\n        // server, wait for the response, and update the UI\n        // accordingly. How this is done is up to you. Using\n        // XHR, fetch, or a GraphQL mutation is typical.\n      };\n    };\n\n    _this.state = {\n      value: ''\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Checkout, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"successPayment\",\n    value: function successPayment() {\n      console.log(\"SUCCESS PAYMENT\");\n    }\n  }, {\n    key: \"errorPayment\",\n    value: function errorPayment() {\n      console.log(\"ERROR PAYMERNT\");\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        value: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        class: \"align-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Buy Tokens\"), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        id: \"tokens\",\n        name: \"tokens\",\n        min: \"100\",\n        max: \"100000\",\n        placeholder: \"Number of Tokens\",\n        value: this.state.value,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })), React.createElement(StripeCheckout, {\n        amount: this.state.value,\n        billingAddress: true,\n        description: \"Buy Instinctiv Tokens\",\n        locale: \"auto\",\n        name: \"instinctiv\",\n        stripeKey: \"pk_test_fSeP0u5pxF5vEmLguwFpf80Z\",\n        token: this.onToken,\n        zipCode: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Checkout;\n}(React.Component);\n\nexport { Checkout as default };","map":{"version":3,"sources":["/Users/yash/instinctiv/instinctiv/src/components/Checkout/index.js"],"names":["React","StripeCheckout","axios","Checkout","props","onToken","description","token","args","t","stripe","createToken","console","log","post","source","id","amount","state","value","metadata","then","catch","errorPayment","handleChange","bind","handleSubmit","event","setState","target","preventDefault","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;;IAEqBC,Q;;;;;AAEjB,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;;AADe,UAYnBC,OAZmB,GAYT,UAACC,WAAD;AAAA,aAAiB,UAACC,KAAD,EAAQC,IAAR,EAAiB;AACxC,YAAIC,CAAC,GAAG,MAAKL,KAAL,CAAWM,MAAX,CAAkBC,WAAlB,EAAR;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACAL,QAAAA,KAAK,CAACY,IAAN,CAAW,kBAAX,EAA+B;AAC3BR,UAAAA,WAAW,EAAXA,WAD2B;AAE3BS,UAAAA,MAAM,EAAER,KAAK,CAACS,EAFa;AAG3BC,UAAAA,MAAM,EAAE,MAAKC,KAAL,CAAWC,KAHQ;AAI3BC,UAAAA,QAAQ,EAAEZ;AAJiB,SAA/B,EAKGa,IALH,CAKQ,YAAM;AACV,cAAId,KAAK,GAAG,MAAKH,KAAL,CAAWM,MAAX,CAAkBC,WAAlB,EAAZ;;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACH,SARD,EASKe,KATL,CASW,YAAM;AAAE,gBAAKC,YAAL;AAAqB,SATxC,EAHwC,CAcxC;AACA;AACA;AACA;AACA;AACH,OAnBS;AAAA,KAZS;;AAEf,UAAKL,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAb;AAEA,UAAKK,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,uDAApB;AALe;AAOlB;;;;wCAEmB,CACnB;;;qCAuBgB;AACbb,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH;;;mCAEc;AACXD,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;;;iCAEYc,K,EAAO;AAChB,WAAKC,QAAL,CAAc;AAAET,QAAAA,KAAK,EAAEQ,KAAK,CAACE,MAAN,CAAaV;AAAtB,OAAd;AACH;;;iCAEYQ,K,EAAO;AAChBA,MAAAA,KAAK,CAACG,cAAN;AACH;;;6BAIQ;AACL,aAEI;AAAK,QAAA,KAAK,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAM,QAAA,QAAQ,EAAE,KAAKJ,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,EAAE,EAAC,QAFP;AAGI,QAAA,IAAI,EAAC,QAHT;AAII,QAAA,GAAG,EAAC,KAJR;AAKI,QAAA,GAAG,EAAC,QALR;AAMI,QAAA,WAAW,EAAC,kBANhB;AAOI,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWC,KAPtB;AAQI,QAAA,QAAQ,EAAE,KAAKK,YARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,EAgBI,oBAAC,cAAD;AACI,QAAA,MAAM,EAAE,KAAKN,KAAL,CAAWC,KADvB;AAEI,QAAA,cAAc,MAFlB;AAGI,QAAA,WAAW,EAAC,uBAHhB;AAII,QAAA,MAAM,EAAC,MAJX;AAKI,QAAA,IAAI,EAAC,YALT;AAMI,QAAA,SAAS,EAAC,kCANd;AAOI,QAAA,KAAK,EAAE,KAAKd,OAPhB;AAQI,QAAA,OAAO,MARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBJ,CAFJ;AA8BH;;;;EApFiCL,KAAK,CAAC+B,S;;SAAvB5B,Q","sourcesContent":["import React from 'react'\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios'\nimport \"./checkout.css\"\n\nexport default class Checkout extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { value: '' };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n    componentDidMount() {\n    }\n\n    onToken = (description) => (token, args) => {\n        let t = this.props.stripe.createToken();\n        console.log(token);\n        axios.post('3RD_PARTY_SERVER', {\n            description,\n            source: token.id,\n            amount: this.state.value,\n            metadata: args\n        }).then(() => {\n            let token = this.props.stripe.createToken();\n            console.log(token);\n        })\n            .catch(() => { this.errorPayment() });\n\n        // TODO: Send the token information and any other\n        // relevant information to your payment process\n        // server, wait for the response, and update the UI\n        // accordingly. How this is done is up to you. Using\n        // XHR, fetch, or a GraphQL mutation is typical.\n    };\n\n    successPayment() {\n        console.log(\"SUCCESS PAYMENT\")\n    }\n\n    errorPayment() {\n        console.log(\"ERROR PAYMERNT\")\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    }\n\n\n\n    render() {\n        return (\n\n            <div class=\"align-center\">\n                <h4>Buy Tokens</h4>\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        type=\"number\"\n                        id=\"tokens\"\n                        name=\"tokens\"\n                        min=\"100\"\n                        max=\"100000\"\n                        placeholder=\"Number of Tokens\"\n                        value={this.state.value}\n                        onChange={this.handleChange}\n                    />\n\n                </form>\n\n                <StripeCheckout\n                    amount={this.state.value}\n                    billingAddress\n                    description=\"Buy Instinctiv Tokens\"\n                    locale=\"auto\"\n                    name=\"instinctiv\"\n                    stripeKey=\"pk_test_fSeP0u5pxF5vEmLguwFpf80Z\"\n                    token={this.onToken}\n                    zipCode\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}