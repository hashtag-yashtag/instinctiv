{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isNan = require('babel-runtime/core-js/number/is-nan');\n\nvar _isNan2 = _interopRequireDefault(_isNan);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Arcs = require('./Arcs');\n\nvar _Arcs2 = _interopRequireDefault(_Arcs);\n\nvar _DonutInnerText = require('./DonutInnerText');\n\nvar _DonutInnerText2 = _interopRequireDefault(_DonutInnerText);\n\nvar _Legend = require('./Legend');\n\nvar _Legend2 = _interopRequireDefault(_Legend);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Calculates the total of all the items' value,\n * using a reduce function over the items.\n * @param {} items - An array of items, each with values, at least.\n */\n\n\nfunction calculateTotal(items) {\n  return items.reduce(function (sum, currItem) {\n    return sum + currItem.value;\n  }, 0);\n}\n/**\n * @extends {Component}\n */\n\n/**\n * @fileOverview Main Donut Chart entry point.\n * Orchestrates all rendering for the chart, passing props to\n * Arcs, DonutInnerText, and Legend children components.\n * @name DonutChart.js\n * @author JJ Naughton\n * @license MIT\n */\n\n\nvar DonutChart = function (_Component) {\n  (0, _inherits3.default)(DonutChart, _Component);\n  /**\n  * Represents a DonutChart.\n  * @constructor\n  * @param {} props - Object of propTypes with defaultProps as fallback.\n  */\n\n  function DonutChart(props) {\n    (0, _classCallCheck3.default)(this, DonutChart);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (DonutChart.__proto__ || (0, _getPrototypeOf2.default)(DonutChart)).call(this, props));\n\n    var data = props.data;\n    _this.state = {\n      selected: data[0],\n      toggleSelect: false\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(DonutChart, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(newProps) {\n      var data = newProps.data; // if new data, reset\n\n      if (data && (0, _stringify2.default)(data) !== (0, _stringify2.default)(this.props.data)) {\n        this.setState({\n          selected: data[0],\n          toggleSelect: false\n        });\n      }\n    }\n    /**\n     * Handles the clicking of an ArcPath region.\n     * Toggles the selected state,\n     * effectively freezing all handlers on other, unselected items.\n     * Calls the onClick handler,\n     * passed by the user as a prop,\n     * providing the item clicked,\n     * as well as whether it's becoming selected or unselected.\n     * @param {} item - The item object selected, with a label and a value, at least.\n     */\n\n  }, {\n    key: 'handleClick',\n    value: function handleClick(item) {\n      if (this.state.selected.label === item.label) {\n        var toggle = this.props.clickToggle ? !this.state.toggleSelect : false;\n        this.setState({\n          toggleSelect: toggle,\n          selected: item\n        });\n        this.props.onClick(item, toggle);\n      }\n    }\n    /**\n     * Handles the mouseenter event over an ArcPath region.\n     * Sets the clicked item as selected in the state object.\n     * @param {} item - The item object selected, with a label and a value, at least.\n     */\n\n  }, {\n    key: 'handleMouseEnter',\n    value: function handleMouseEnter(item) {\n      if (!this.state.toggleSelect) {\n        this.setState({\n          selected: item\n        });\n        this.props.onMouseEnter(item);\n      }\n    }\n    /* React render function */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          startAngle = _props.startAngle,\n          width = _props.width,\n          height = _props.height,\n          formatValues = _props.formatValues,\n          className = _props.className,\n          data = _props.data,\n          legend = _props.legend,\n          emptyColor = _props.emptyColor,\n          strokeColor = _props.strokeColor,\n          colors = _props.colors,\n          colorFunction = _props.colorFunction,\n          innerRadius = _props.innerRadius,\n          outerRadius = _props.outerRadius,\n          emptyOffset = _props.emptyOffset,\n          selectedOffset = _props.selectedOffset,\n          toggledOffset = _props.toggledOffset;\n      var arcsClassName = className + '-arcs';\n      var innerTextClassName = className + '-innertext';\n      var legendClassName = className + '-legend';\n      var checkData = data.length ? data : [{\n        label: '',\n        value: 100,\n        isEmpty: true\n      }];\n      var total = calculateTotal(checkData);\n      var twoThirds = 2 / 3;\n      var graphWidth = legend ? width * twoThirds : width;\n      var legendWidth = width - graphWidth;\n      return _react2.default.createElement('svg', {\n        className: className,\n        width: width,\n        height: height,\n        viewBox: '0 0 ' + width + ' ' + height\n      }, _react2.default.createElement(_Arcs2.default, {\n        className: arcsClassName,\n        colors: colors,\n        data: checkData,\n        width: graphWidth,\n        emptyColor: emptyColor,\n        strokeColor: strokeColor,\n        colorFunction: colorFunction,\n        onMouseEnter: this.handleMouseEnter.bind(this),\n        onClick: this.handleClick.bind(this),\n        selected: this.state.selected,\n        startAngle: startAngle,\n        toggleSelect: this.state.toggleSelect,\n        innerRadius: innerRadius,\n        outerRadius: outerRadius,\n        selectedOffset: selectedOffset,\n        toggledOffset: toggledOffset,\n        emptyOffset: emptyOffset,\n        total: total\n      }), _react2.default.createElement(_DonutInnerText2.default, {\n        item: this.state.selected,\n        width: graphWidth,\n        formatValues: formatValues,\n        total: total,\n        className: innerTextClassName\n      }), legend ? _react2.default.createElement(_Legend2.default, {\n        data: checkData,\n        totalWidth: width,\n        width: legendWidth,\n        colors: colors,\n        emptyColor: emptyColor,\n        strokeColor: strokeColor,\n        colorFunction: colorFunction,\n        onMouseEnter: this.handleMouseEnter.bind(this),\n        onClick: this.handleClick.bind(this),\n        selected: this.state.selected,\n        toggleSelect: this.state.toggleSelect,\n        className: legendClassName\n      }) : null);\n    }\n  }]);\n  return DonutChart;\n}(_react.Component);\n\nexports.default = DonutChart;\nDonutChart.propTypes = {\n  data: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    value: _propTypes2.default.number.isRequired,\n    label: _propTypes2.default.string.isRequired,\n    className: _propTypes2.default.string,\n    isEmpty: _propTypes2.default.boolean\n  })).isRequired,\n  className: _propTypes2.default.string,\n  height: _propTypes2.default.number,\n  width: _propTypes2.default.number,\n  colors: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  emptyColor: _propTypes2.default.string,\n  stokeColor: _propTypes2.default.string,\n  startAngle: _propTypes2.default.number,\n  colorFunction: _propTypes2.default.func,\n  innerRadius: _propTypes2.default.number,\n  outerRadius: _propTypes2.default.number,\n  selectedOffset: _propTypes2.default.number,\n  emptyOffset: _propTypes2.default.number,\n  toggledOffset: _propTypes2.default.number,\n  formatValues: _propTypes2.default.func,\n  onMouseEnter: _propTypes2.default.func,\n  onClick: _propTypes2.default.func,\n  legend: _propTypes2.default.bool,\n  clickToggle: _propTypes2.default.bool\n};\nDonutChart.defaultProps = {\n  data: [{\n    label: '',\n    value: 100,\n    isEmpty: true\n  }],\n  className: 'donutchart',\n  height: 500,\n  width: 750,\n  colors: ['#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4caf50', '#8bc34a', '#cddc39', '#ffeb3b', '#ffc107', '#ff9800', '#ff5722', '#795548', '#607d8b'],\n  emptyColor: '#e0e0e0',\n  strokeColor: '#212121',\n  startAngle: 0,\n  colorFunction: function colorFunction(colors, index) {\n    return colors[index % colors.length];\n  },\n  innerRadius: 0.70,\n  outerRadius: 0.90,\n  selectedOffset: 0.03,\n  emptyOffset: 0.08,\n  toggledOffset: 0.04,\n  formatValues: function formatValues(value, total) {\n    return (0, _isNan2.default)(value / total) ? '--' : (value / total * 100).toFixed(2) + '%';\n  },\n  onMouseEnter: function onMouseEnter(item) {\n    return item;\n  },\n  onClick: function onClick(item, toggled) {\n    return toggled ? item : null;\n  },\n  legend: true,\n  clickToggle: true\n};","map":null,"metadata":{},"sourceType":"script"}