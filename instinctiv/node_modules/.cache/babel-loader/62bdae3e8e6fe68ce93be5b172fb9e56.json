{"ast":null,"code":"import _classCallCheck from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yash/instinctiv/instinctiv/src/components/Session/withAuthorization.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nvar withAuthorization = function withAuthorization(condition) {\n  return function (Component) {\n    var WithAuthorization =\n    /*#__PURE__*/\n    function (_React$Component) {\n      _inherits(WithAuthorization, _React$Component);\n\n      function WithAuthorization() {\n        _classCallCheck(this, WithAuthorization);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(WithAuthorization).apply(this, arguments));\n      }\n\n      _createClass(WithAuthorization, [{\n        key: \"componentDidMount\",\n        value: function componentDidMount() {\n          var _this = this;\n\n          /*  this.listener = this.props.firebase.auth.onAuthStateChanged(\n             authUser => {\n               if (authUser) {\n                 this.props.firebase\n                   .db.collection('Users').doc(authUser.uid)\n                   .onSnapshot(docSnapshot => {\n                     const dbUser = docSnapshot.data();\n                      // default empty roles\n                     if (!dbUser.roles) {\n                       dbUser.roles = [];\n                     }\n                      // merge auth and db user\n                     authUser = {\n                       uid: authUser.uid,\n                       email: authUser.email,\n                       ...dbUser,\n                     };\n                      if (!condition(authUser)) {\n                       this.props.history.push(ROUTES.SIGN_IN);\n                     }\n                   });\n               } else {\n                 this.props.history.push(ROUTES.SIGN_IN);\n               }\n             },\n           ); */\n          this.listener = this.props.firebase.onAuthUserListener(function (authUser) {\n            if (!condition(authUser)) {\n              _this.props.history.push(ROUTES.SIGN_IN);\n            }\n          }, function () {\n            return _this.props.history.push(ROUTES.SIGN_IN);\n          });\n        }\n      }, {\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          this.listener();\n        }\n        /* <Component {...this.props} /> */\n\n      }, {\n        key: \"render\",\n        value: function render() {\n          var _this2 = this;\n\n          return React.createElement(AuthUserContext.Consumer, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }, function (authUser) {\n            return condition(authUser) ? React.createElement(Component, Object.assign({}, _this2.props, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 60\n              },\n              __self: this\n            })) : null;\n          });\n        }\n      }]);\n\n      return WithAuthorization;\n    }(React.Component);\n\n    return compose(withRouter, withFirebase)(WithAuthorization);\n  };\n};\n\nexport default withAuthorization;","map":{"version":3,"sources":["/Users/yash/instinctiv/instinctiv/src/components/Session/withAuthorization.js"],"names":["React","withRouter","compose","AuthUserContext","withFirebase","ROUTES","withAuthorization","condition","Component","WithAuthorization","listener","props","firebase","onAuthUserListener","authUser","history","push","SIGN_IN"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAOC,eAAP,MAA4B,WAA5B;AAEA,SAASC,YAAT,QAA6B,aAA7B;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,SAAS;AAAA,SAAI,UAAAC,SAAS,EAAI;AAAA,QAC5CC,iBAD4C;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,4CAE5B;AAAA;;AACnB;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BC,eAAKC,QAAL,GAAgB,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,kBAApB,CACd,UAAAC,QAAQ,EAAI;AACV,gBAAI,CAACP,SAAS,CAACO,QAAD,CAAd,EAA0B;AACxB,cAAA,KAAI,CAACH,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwBX,MAAM,CAACY,OAA/B;AACD;AACF,WALa,EAMd;AAAA,mBAAM,KAAI,CAACN,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwBX,MAAM,CAACY,OAA/B,CAAN;AAAA,WANc,CAAhB;AAQD;AAxC+C;AAAA;AAAA,+CA0CzB;AACrB,eAAKP,QAAL;AACD;AACL;;AA7CoD;AAAA;AAAA,iCA8CvC;AAAA;;AACP,iBACE,oBAAC,eAAD,CAAiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,UAAAI,QAAQ;AAAA,mBACPP,SAAS,CAACO,QAAD,CAAT,GAAsB,oBAAC,SAAD,oBAAe,MAAI,CAACH,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAtB,GAAsD,IAD/C;AAAA,WADX,CADF;AAOD;AAtD+C;;AAAA;AAAA,MAClBX,KAAK,CAACQ,SADY;;AAyDlD,WAAON,OAAO,CACZD,UADY,EAEZG,YAFY,CAAP,CAGLK,iBAHK,CAAP;AAID,GA7DkC;AAAA,CAAnC;;AA+DA,eAAeH,iBAAf","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport AuthUserContext from './context';\n\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n     /*  this.listener = this.props.firebase.auth.onAuthStateChanged(\n        authUser => {\n          if (authUser) {\n            this.props.firebase\n              .db.collection('Users').doc(authUser.uid)\n              .onSnapshot(docSnapshot => {\n                const dbUser = docSnapshot.data();\n\n                // default empty roles\n                if (!dbUser.roles) {\n                  dbUser.roles = [];\n                }\n\n                // merge auth and db user\n                authUser = {\n                  uid: authUser.uid,\n                  email: authUser.email,\n                  ...dbUser,\n                };\n\n                if (!condition(authUser)) {\n                  this.props.history.push(ROUTES.SIGN_IN);\n                }\n              });\n          } else {\n            this.props.history.push(ROUTES.SIGN_IN);\n          }\n        },\n      ); */\n      this.listener = this.props.firebase.onAuthUserListener(\n        authUser => {\n          if (!condition(authUser)) {\n            this.props.history.push(ROUTES.SIGN_IN);\n          }\n        },\n        () => this.props.history.push(ROUTES.SIGN_IN),\n      );\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n/* <Component {...this.props} /> */\n    render() {\n      return (\n        <AuthUserContext.Consumer>\n          {authUser =>\n            condition(authUser) ? <Component {...this.props} /> : null\n          }\n        </AuthUserContext.Consumer>\n      );\n    }\n  }\n\n  return compose(\n    withRouter,\n    withFirebase,\n  )(WithAuthorization);\n};\n\nexport default withAuthorization;"]},"metadata":{},"sourceType":"module"}