{"ast":null,"code":"import _classCallCheck from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/yash/instinctiv/instinctiv/src/components/Checkout/index.js\";\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\nimport \"./checkout.css\";\nimport { Button } from 'reactstrap';\n\nvar Checkout =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Checkout, _React$Component);\n\n  function Checkout(props) {\n    var _this;\n\n    _classCallCheck(this, Checkout);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Checkout).call(this, props));\n\n    _this.toggleDarkLight = function (event) {\n      var body = document.getElementById(\"body\");\n      var currentClass = body.className;\n      body.className = currentClass == \"dark-mode\" ? \"light-mode\" : \"dark-mode\";\n    };\n\n    _this.onToken = function (description) {\n      return function (token, args) {\n        var t = _this.props.stripe.createToken();\n\n        console.log(t);\n        console.log(token);\n        axios.post('3RD_PARTY_SERVER', {\n          description: description,\n          source: token.id,\n          amount: _this.state.value,\n          metadata: args\n        }).then(function () {\n          var token = _this.props.stripe.createToken();\n\n          console.log(token);\n        }).catch(function () {\n          _this.errorPayment();\n        }); // TODO: Send the token information and any other\n        // relevant information to your payment process\n        // server, wait for the response, and update the UI\n        // accordingly. How this is done is up to you. Using\n        // XHR, fetch, or a GraphQL mutation is typical.\n      };\n    };\n\n    _this.state = {\n      value: ''\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Checkout, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"successPayment\",\n    value: function successPayment() {\n      var _this2 = this;\n\n      console.log(\"SUCCESS PAYMENT\");\n      var newBalance = Number(this.state.value) + this.balance;\n      this.db.collection(\"Users\").doc(this.props.firebase.auth.O).update({\n        \"balance\": newBalance\n      });\n      this.db.collection(\"Users\").doc(this.props.firebase.auth.O).onSnapshot(function (docSnapshot) {\n        console.log(\"Received doc snapshot: docSnapshot\", docSnapshot.data());\n        _this2.balance = docSnapshot.data().balance;\n      }, function (err) {\n        console.log(\"Encountered error: \".concat(err));\n      });\n    }\n  }, {\n    key: \"errorPayment\",\n    value: function errorPayment() {\n      console.log(\"ERROR PAYMERNT\");\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        value: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(event) {\n      event.preventDefault();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        class: \"align-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"body\", {\n        id: \"body\",\n        class: \"light-mode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        name: \"dark_light\",\n        onClick: this.toggleDarkLight,\n        title: \"Toggle dark/light mode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Change Theme\"), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Buy Tokens\"), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"number\",\n        id: \"tokens\",\n        name: \"tokens\",\n        min: \"100\",\n        max: \"100000\",\n        placeholder: \"Number of Tokens\",\n        value: this.state.value,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      })), React.createElement(StripeCheckout, {\n        amount: this.state.value,\n        billingAddress: true,\n        description: \"Buy Instinctiv Tokens\",\n        locale: \"auto\",\n        name: \"instinctiv\",\n        stripeKey: \"pk_test_fSeP0u5pxF5vEmLguwFpf80Z\",\n        token: this.onToken,\n        zipCode: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Checkout;\n}(React.Component);\n\nexport { Checkout as default };","map":{"version":3,"sources":["/Users/yash/instinctiv/instinctiv/src/components/Checkout/index.js"],"names":["React","StripeCheckout","axios","Button","Checkout","props","toggleDarkLight","event","body","document","getElementById","currentClass","className","onToken","description","token","args","t","stripe","createToken","console","log","post","source","id","amount","state","value","metadata","then","catch","errorPayment","handleChange","bind","handleSubmit","newBalance","Number","balance","db","collection","doc","firebase","auth","O","update","onSnapshot","docSnapshot","data","err","setState","target","preventDefault","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios'\nimport \"./checkout.css\"\nimport {Button} from 'reactstrap';\nexport default class Checkout extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { value: '' };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n    toggleDarkLight = event => {\n     var body = document.getElementById(\"body\");\n     var currentClass = body.className;\n     body.className = currentClass == \"dark-mode\" ? \"light-mode\" : \"dark-mode\";\n   }\n\n    componentDidMount() {\n    }\n\n    onToken = (description) => (token, args) => {\n        let t = this.props.stripe.createToken();\n        console.log(t);\n        console.log(token);\n\n        axios.post('3RD_PARTY_SERVER', {\n            description,\n            source: token.id,\n            amount: this.state.value,\n            metadata: args\n        }).then(() => {\n            let token = this.props.stripe.createToken();\n            console.log(token);\n        })\n            .catch(() => { this.errorPayment() });\n\n        // TODO: Send the token information and any other\n        // relevant information to your payment process\n        // server, wait for the response, and update the UI\n        // accordingly. How this is done is up to you. Using\n        // XHR, fetch, or a GraphQL mutation is typical.\n    };\n\n    successPayment() {\n        console.log(\"SUCCESS PAYMENT\")\n        \n        const newBalance = Number(this.state.value) + this.balance\n        this.db.collection(\"Users\").doc(this.props.firebase.auth.O).update({\n            \"balance\": newBalance\n        });\n\n        this.db.collection(\"Users\").doc(this.props.firebase.auth.O).onSnapshot(docSnapshot => {\n            console.log(`Received doc snapshot: docSnapshot`, docSnapshot.data());\n            this.balance = docSnapshot.data().balance\n          }, err => {\n            console.log(`Encountered error: ${err}`);\n        });\n    }\n\n    errorPayment() {\n        console.log(\"ERROR PAYMERNT\")\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    }\n\n\n\n    render() {\n        return (\n\n            <div class=\"align-center\">\n              <body id=\"body\" class=\"light-mode\">\n              <Button color=\"primary\" name=\"dark_light\" onClick= {this.toggleDarkLight} title=\"Toggle dark/light mode\">Change Theme</Button>\n                <h4>Buy Tokens</h4>\n                <form onSubmit={this.handleSubmit}>\n                    <input\n                        type=\"number\"\n                        id=\"tokens\"\n                        name=\"tokens\"\n                        min=\"100\"\n                        max=\"100000\"\n                        placeholder=\"Number of Tokens\"\n                        value={this.state.value}\n                        onChange={this.handleChange}\n                    />\n\n                </form>\n\n                <StripeCheckout\n                    amount={this.state.value}\n                    billingAddress\n                    description=\"Buy Instinctiv Tokens\"\n                    locale=\"auto\"\n                    name=\"instinctiv\"\n                    stripeKey=\"pk_test_fSeP0u5pxF5vEmLguwFpf80Z\"\n                    token={this.onToken}\n                    zipCode\n                />\n            </body>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}