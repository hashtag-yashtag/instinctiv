{"ast":null,"code":"import _classCallCheck from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/yash/instinctiv/instinctiv/src/components/Landing/index.js\";\nimport React from \"react\";\nimport logotrial from \"./logotrial.png\";\nimport { Button, ButtonGroup, ButtonToolbar, Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledPopover, PopoverHeader, PopoverBody } from \"reactstrap\";\nimport MC104 from \"./MC104.png\";\nimport MC102 from \"./MC102.png\";\nimport MC103 from \"./MC103.png\";\nimport MC101 from \"./MC101.png\";\nimport Parth_104_copy from \"./Parth_104_copy.png\";\n\nvar ModalExample =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModalExample, _React$Component);\n\n  function ModalExample(props) {\n    var _this;\n\n    _classCallCheck(this, ModalExample);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModalExample).call(this, props));\n    _this.state = {\n      modal: false,\n      popoverOpen: false\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ModalExample, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        popoverOpen: !this.state.popoverOpen\n      });\n      this.setState(function (prevState) {\n        return {\n          modal: !prevState.modal\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logotrial,\n        alt: \"logotrial\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), React.createElement(Button, {\n        size: \"lg\",\n        block: true,\n        buttonStyle: {\n          width: \"100%\"\n        },\n        color: \"success\",\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"ABOUT US\"), this.props.buttonLabel), React.createElement(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.toggle,\n        className: this.props.className,\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle,\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"INSTINCTIV\")), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Stock prediction models are about as accurate as the flip of a coin even though the models use sophisticated technologies such as Neural Networks, Deep Learning technologies and Natural Language Processing. Our idea is to simplify this process by our crowdsourced prediction platform where individuals can leave their predictions voluntarily by turning this into a game of sorts. To do so, you would have to place a \\u201CBET\\u201D on the movement of the Average Daily Price of stock(s) (UP or DOWN). Depending on the movement of the Average Daily Price, you will either win or lost \\u201CTOKENS\\u201D.\"), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(ButtonGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(Button, {\n        id: \"Popover1\",\n        type: \"button\",\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"STOCKS\"), React.createElement(UncontrolledPopover, {\n        trigger: \"legacy\",\n        placement: \"bottom\",\n        target: \"Popover1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(PopoverHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"STOCKS\"), React.createElement(PopoverBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: Parth_104_copy,\n        alt: \"Parth_104_copy\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), \"Legacy is a reactstrap special trigger value (outside of bootstrap's spec/standard). Before reactstrap correctly supported click and focus, it had a hybrid which was very useful and has been brought back as trigger=\\\"legacy\\\". One advantage of the legacy trigger is that it allows the popover text to be selected while also closing when clicking outside the triggering element and popover itself.\")), React.createElement(Button, {\n        id: \"Popover2\",\n        type: \"button\",\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"BETS\"), React.createElement(UncontrolledPopover, {\n        trigger: \"legacy\",\n        placement: \"bottom\",\n        target: \"Popover2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(PopoverHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"BETS\"), React.createElement(PopoverBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Legacy is a reactstrap special trigger value (outside of bootstrap's spec/standard). Before reactstrap correctly supported click and focus, it had a hybrid which was very useful and has been brought back as trigger=\\\"legacy\\\". One advantage of the legacy trigger is that it allows the popover text to be selected while also closing when clicking outside the triggering element and popover itself.\")), React.createElement(Button, {\n        id: \"Popover3\",\n        type: \"button\",\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"USER PROFILE\"), React.createElement(UncontrolledPopover, {\n        trigger: \"legacy\",\n        placement: \"bottom\",\n        target: \"Popover3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(PopoverHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"USER PROFILE\"), React.createElement(PopoverBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Legacy is a reactstrap special trigger value (outside of bootstrap's spec/standard). Before reactstrap correctly supported click and focus, it had a hybrid which was very useful and has been brought back as trigger=\\\"legacy\\\". One advantage of the legacy trigger is that it allows the popover text to be selected while also closing when clicking outside the triggering element and popover itself.\")), React.createElement(Button, {\n        id: \"Popover4\",\n        type: \"button\",\n        color: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"NEWS\"), React.createElement(UncontrolledPopover, {\n        trigger: \"legacy\",\n        placement: \"bottom\",\n        target: \"Popover4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(PopoverHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"NEWS\"), React.createElement(PopoverBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Legacy is a reactstrap special trigger value (outside of bootstrap's spec/standard). Before reactstrap correctly supported click and focus, it had a hybrid which was very useful and has been brought back as trigger=\\\"legacy\\\". One advantage of the legacy trigger is that it allows the popover text to be selected while also closing when clicking outside the triggering element and popover itself.\")))))), React.createElement(\"img\", {\n        src: MC104,\n        alt: \"MC104\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: MC102,\n        alt: \"MC102\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: MC103,\n        alt: \"MC103\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: MC101,\n        alt: \"MC101\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ModalExample;\n}(React.Component);\n\nexport default ModalExample;","map":{"version":3,"sources":["/Users/yash/instinctiv/instinctiv/src/components/Landing/index.js"],"names":["React","logotrial","Button","ButtonGroup","ButtonToolbar","Modal","ModalHeader","ModalBody","ModalFooter","UncontrolledPopover","PopoverHeader","PopoverBody","MC104","MC102","MC103","MC101","Parth_104_copy","ModalExample","props","state","modal","popoverOpen","toggle","bind","setState","prevState","width","buttonLabel","className","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport logotrial from \"./logotrial.png\";\nimport {\n  Button,\n  ButtonGroup,\n  ButtonToolbar,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  UncontrolledPopover,\n  PopoverHeader,\n  PopoverBody\n} from \"reactstrap\";\nimport MC104 from \"./MC104.png\";\nimport MC102 from \"./MC102.png\";\nimport MC103 from \"./MC103.png\";\nimport MC101 from \"./MC101.png\";\nimport Parth_104_copy from \"./Parth_104_copy.png\";\n\nclass ModalExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      popoverOpen: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      popoverOpen: !this.state.popoverOpen\n    });\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <img src={logotrial} alt=\"logotrial\" />\n        <Button\n          size=\"lg\"\n          block\n          buttonStyle={{ width: \"100%\" }}\n          color=\"success\"\n          onClick={this.toggle}\n        >\n          <h1>ABOUT US</h1>\n          {this.props.buttonLabel}\n        </Button>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          className={this.props.className}\n          centered\n        >\n          <ModalHeader toggle={this.toggle} centered>\n            <h2>INSTINCTIV</h2>\n          </ModalHeader>\n          <ModalBody>\n            Stock prediction models are about as accurate as the flip of a coin\n            even though the models use sophisticated technologies such as Neural\n            Networks, Deep Learning technologies and Natural Language\n            Processing. Our idea is to simplify this process by our crowdsourced\n            prediction platform where individuals can leave their predictions\n            voluntarily by turning this into a game of sorts. To do so, you\n            would have to place a “BET” on the movement of the Average Daily\n            Price of stock(s) (UP or DOWN). Depending on the movement of the\n            Average Daily Price, you will either win or lost “TOKENS”.\n          </ModalBody>\n          <ModalFooter>\n            <ButtonToolbar>\n              <ButtonGroup>\n                <Button id=\"Popover1\" type=\"button\" color=\"success\">\n                  STOCKS\n                </Button>\n                <UncontrolledPopover\n                  trigger=\"legacy\"\n                  placement=\"bottom\"\n                  target=\"Popover1\"\n                >\n                  <PopoverHeader>STOCKS</PopoverHeader>\n                  <PopoverBody>\n                    <img src={Parth_104_copy} alt=\"Parth_104_copy\" />\n                    Legacy is a reactstrap special trigger value (outside of\n                    bootstrap's spec/standard). Before reactstrap correctly\n                    supported click and focus, it had a hybrid which was very\n                    useful and has been brought back as trigger=\"legacy\". One\n                    advantage of the legacy trigger is that it allows the\n                    popover text to be selected while also closing when clicking\n                    outside the triggering element and popover itself.\n                  </PopoverBody>\n                </UncontrolledPopover>\n                <Button id=\"Popover2\" type=\"button\" color=\"success\">\n                  BETS\n                </Button>\n                <UncontrolledPopover\n                  trigger=\"legacy\"\n                  placement=\"bottom\"\n                  target=\"Popover2\"\n                >\n                  <PopoverHeader>BETS</PopoverHeader>\n                  <PopoverBody>\n                    Legacy is a reactstrap special trigger value (outside of\n                    bootstrap's spec/standard). Before reactstrap correctly\n                    supported click and focus, it had a hybrid which was very\n                    useful and has been brought back as trigger=\"legacy\". One\n                    advantage of the legacy trigger is that it allows the\n                    popover text to be selected while also closing when clicking\n                    outside the triggering element and popover itself.\n                  </PopoverBody>\n                </UncontrolledPopover>\n                <Button id=\"Popover3\" type=\"button\" color=\"success\">\n                  USER PROFILE\n                </Button>\n                <UncontrolledPopover\n                  trigger=\"legacy\"\n                  placement=\"bottom\"\n                  target=\"Popover3\"\n                >\n                  <PopoverHeader>USER PROFILE</PopoverHeader>\n                  <PopoverBody>\n                    Legacy is a reactstrap special trigger value (outside of\n                    bootstrap's spec/standard). Before reactstrap correctly\n                    supported click and focus, it had a hybrid which was very\n                    useful and has been brought back as trigger=\"legacy\". One\n                    advantage of the legacy trigger is that it allows the\n                    popover text to be selected while also closing when clicking\n                    outside the triggering element and popover itself.\n                  </PopoverBody>\n                </UncontrolledPopover>\n                <Button id=\"Popover4\" type=\"button\" color=\"success\">\n                  NEWS\n                </Button>\n                <UncontrolledPopover\n                  trigger=\"legacy\"\n                  placement=\"bottom\"\n                  target=\"Popover4\"\n                >\n                  <PopoverHeader>NEWS</PopoverHeader>\n                  <PopoverBody>\n                    Legacy is a reactstrap special trigger value (outside of\n                    bootstrap's spec/standard). Before reactstrap correctly\n                    supported click and focus, it had a hybrid which was very\n                    useful and has been brought back as trigger=\"legacy\". One\n                    advantage of the legacy trigger is that it allows the\n                    popover text to be selected while also closing when clicking\n                    outside the triggering element and popover itself.\n                  </PopoverBody>\n                </UncontrolledPopover>\n              </ButtonGroup>\n            </ButtonToolbar>\n          </ModalFooter>\n        </Modal>\n        <img src={MC104} alt=\"MC104\" />\n        <img src={MC102} alt=\"MC102\" />\n        <img src={MC103} alt=\"MC103\" />\n        <img src={MC101} alt=\"MC101\" />\n      </div>\n    );\n  }\n}\n\nexport default ModalExample;\n"]},"metadata":{},"sourceType":"module"}