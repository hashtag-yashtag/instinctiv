{"ast":null,"code":"import _classCallCheck from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yash/instinctiv/instinctiv/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/yash/instinctiv/instinctiv/src/components/Home/Autocomplete.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Autocomplete, _Component);\n\n  function Autocomplete(props) {\n    var _this;\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Autocomplete).call(this, props));\n\n    _this.onChange = function (e) {\n      var suggestions = _this.props.suggestions;\n      var userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      var filteredSuggestions = suggestions.filter(function (suggestion) {\n        return suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1;\n      });\n\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    };\n\n    _this.onClick = function (e) {\n      _this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n    };\n\n    _this.onKeyDown = function (e) {\n      var _this$state = _this.state,\n          activeSuggestion = _this$state.activeSuggestion,\n          filteredSuggestions = _this$state.filteredSuggestions; // User pressed the enter key\n\n      if (e.keyCode === 13) {\n        _this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: filteredSuggestions[activeSuggestion]\n        });\n      } // User pressed the up arrow\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          _this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            _this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    };\n\n    _this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Autocomplete, [{\n    key: \"render\",\n    value: function render() {\n      var onChange = this.onChange,\n          onClick = this.onClick,\n          onKeyDown = this.onKeyDown,\n          _this$state2 = this.state,\n          activeSuggestion = _this$state2.activeSuggestion,\n          filteredSuggestions = _this$state2.filteredSuggestions,\n          showSuggestions = _this$state2.showSuggestions,\n          userInput = _this$state2.userInput;\n      var suggestionsListComponent;\n\n      if (showSuggestions && userInput) {\n        if (filteredSuggestions.length) {\n          suggestionsListComponent = React.createElement(\"ul\", {\n            class: \"suggestions\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, filteredSuggestions.map(function (suggestion, index) {\n            var className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return React.createElement(\"li\", {\n              className: className,\n              key: suggestion,\n              onClick: onClick,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 112\n              },\n              __self: this\n            }, suggestion);\n          }));\n        } else {\n          suggestionsListComponent = React.createElement(\"div\", {\n            class: \"no-suggestions\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          }, React.createElement(\"em\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          }, \"No suggestions, you're on your own!\"));\n        }\n      }\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: userInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), suggestionsListComponent);\n    }\n  }]);\n\n  return Autocomplete;\n}(Component);\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/yash/instinctiv/instinctiv/src/components/Home/Autocomplete.jsx"],"names":["React","Component","Fragment","PropTypes","Autocomplete","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","onClick","innerText","onKeyDown","state","keyCode","length","suggestionsListComponent","map","index","className","propTypes","instanceOf","Array","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Autocomplete extends Component {\n  static propTypes = {\n    suggestions: PropTypes.instanceOf(Array)\n  };\n\n  static defaultProps = {\n    suggestions: []\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n  }\n\n  onChange = e => {\n    const { suggestions } = this.props;\n    const userInput = e.currentTarget.value;\n\n    // Filter our suggestions that don't contain the user's input\n    const filteredSuggestions = suggestions.filter(\n      suggestion =>\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions,\n      showSuggestions: true,\n      userInput: e.currentTarget.value\n    });\n  };\n\n  onClick = e => {\n    this.setState({\n      activeSuggestion: 0,\n      filteredSuggestions: [],\n      showSuggestions: false,\n      userInput: e.currentTarget.innerText\n    });\n  };\n\n  onKeyDown = e => {\n    const { activeSuggestion, filteredSuggestions } = this.state;\n\n    // User pressed the enter key\n    if (e.keyCode === 13) {\n      this.setState({\n        activeSuggestion: 0,\n        showSuggestions: false,\n        userInput: filteredSuggestions[activeSuggestion]\n      });\n    }\n    // User pressed the up arrow\n    else if (e.keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\n    }\n    // User pressed the down arrow\n    else if (e.keyCode === 40) {\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\n        return;\n      }\n\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\n    }\n  };\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = (\n          <ul class=\"suggestions\">\n            {filteredSuggestions.map((suggestion, index) => {\n              let className;\n\n              // Flag the active suggestion with a class\n              if (index === activeSuggestion) {\n                className = \"suggestion-active\";\n              }\n\n              return (\n                <li className={className} key={suggestion} onClick={onClick}>\n                  {suggestion}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      } else {\n        suggestionsListComponent = (\n          <div class=\"no-suggestions\">\n            <em>No suggestions, you're on your own!</em>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <Fragment>\n        <input\n          type=\"text\"\n          onChange={onChange}\n          onKeyDown={onKeyDown}\n          value={userInput}\n        />\n        {suggestionsListComponent}\n      </Fragment>\n    );\n  }\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}