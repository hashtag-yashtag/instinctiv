{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isNan = require('babel-runtime/core-js/number/is-nan');\n\nvar _isNan2 = _interopRequireDefault(_isNan);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Calculate coordinates of given arc.\n * @param {number} half - Half the total width of the chart.\n * @param {number} radius - Radius of the arc.\n * @param {number} startAngle - Starting angle for the arc.\n * @param {number} endAngle - Ending angle for the arc.\n */\n\n/**\n * @fileOverview ArcPath component.\n * Rendered chart section dictated by each item.\n * @name ArcPath.js\n * @author JJ Naughton\n * @license MIT\n */\n\n\nfunction coordinates(half, radius, startAngle, endAngle) {\n  var startAngleDegrees = Math.PI * startAngle / 180;\n  var x1 = half + half * radius * Math.cos(startAngleDegrees);\n  var y1 = half + half * radius * Math.sin(startAngleDegrees);\n  var endAngleDegrees = Math.PI * endAngle / 180;\n  var x2 = half + half * radius * Math.cos(endAngleDegrees);\n  var y2 = half + half * radius * Math.sin(endAngleDegrees);\n  return {\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2\n  };\n}\n/**\n * Creates an SVG arc object for an SVG path object.\n * @param {number} width - Total width of the chart.\n * @param {number} radius - Radius of the arc.\n * @param {string} largeArcFlag - Flag for angles over 180 degrees.\n * @param {number} x - X coordinate for arc.\n * @param {number} y - Y coordinate for arc.\n */\n\n\nfunction arc(width, radius, largeArcFlag, x, y) {\n  var z = width / 2 * radius;\n  return 'A' + z + ', ' + z + ' 0 ' + largeArcFlag + ' ' + x + ', ' + y;\n}\n/**\n * Creates the SVG path object for an item.\n * @param {number} value - Value of incoming item.\n * @param {number} total - Culmulative value of all items\n * @param {number} startAngle - Degree at which the angle calculation should begin.\n * @param {number} width - Total width of the chart.\n * @param {number} innerRadius - Inner circle's radius.\n * @param {number} outerRadius - Outer circle's radius.\n */\n\n\nfunction path(activeAngle, startAngle, width, innerRadius, outerRadius) {\n  var endAngle = startAngle + activeAngle;\n  var largeArcFlagOuter = activeAngle > 180 ? '1 1' : '0 1';\n  var largeArcFlagInner = activeAngle > 180 ? '1 0' : '0 0';\n  var half = width / 2;\n  var outerCoords = coordinates(half, outerRadius, startAngle, endAngle);\n  var innerCoords = coordinates(half, innerRadius, startAngle, endAngle);\n  var outerArc = arc(width, outerRadius, largeArcFlagOuter, outerCoords.x2, outerCoords.y2);\n  var innerArc = arc(width, innerRadius, largeArcFlagInner, innerCoords.x1, innerCoords.y1);\n  return 'M' + outerCoords.x1 + ',' + outerCoords.y1 + '\\n    ' + outerArc + '\\n    L' + innerCoords.x2 + ',' + innerCoords.y2 + '\\n    ' + innerArc + ' z';\n}\n/**\n * @extends {Component}\n */\n\n\nvar ArcPath = function (_Component) {\n  (0, _inherits3.default)(ArcPath, _Component);\n\n  function ArcPath() {\n    (0, _classCallCheck3.default)(this, ArcPath);\n    return (0, _possibleConstructorReturn3.default)(this, (ArcPath.__proto__ || (0, _getPrototypeOf2.default)(ArcPath)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(ArcPath, [{\n    key: 'render',\n\n    /* React render function */\n    value: function render() {\n      var _props = this.props,\n          width = _props.width,\n          angle = _props.angle,\n          total = _props.total,\n          fill = _props.fill,\n          stroke = _props.stroke,\n          opacity = _props.opacity,\n          item = _props.item,\n          className = _props.className,\n          innerRadius = _props.innerRadius,\n          outerRadius = _props.outerRadius,\n          _onClick = _props.onClick,\n          _onMouseEnter = _props.onMouseEnter;\n      var value = item.value;\n      var activeAngle = (0, _isNan2.default)(value / total) || total / value === 1 ? 359.99 : value / total * 360;\n      var d = path(activeAngle, angle, width, innerRadius, outerRadius);\n      return _react2.default.createElement('path', {\n        onClick: function onClick() {\n          return _onClick(item);\n        },\n        onMouseEnter: function onMouseEnter() {\n          return _onMouseEnter(item);\n        },\n        className: className,\n        d: d,\n        stroke: stroke,\n        fill: fill,\n        opacity: opacity\n      });\n    }\n  }]);\n  return ArcPath;\n}(_react.Component);\n\nexports.default = ArcPath;\nArcPath.propTypes = {\n  item: _propTypes2.default.shape({\n    value: _propTypes2.default.number.isRequired,\n    label: _propTypes2.default.string.isRequired,\n    className: _propTypes2.default.string,\n    isEmpty: _propTypes2.default.boolean\n  }).isRequired,\n  total: _propTypes2.default.number.isRequired,\n  angle: _propTypes2.default.number.isRequired,\n  width: _propTypes2.default.number,\n  innerRadius: _propTypes2.default.number.isRequired,\n  outerRadius: _propTypes2.default.number.isRequired,\n  onMouseEnter: _propTypes2.default.func.isRequired,\n  onClick: _propTypes2.default.func.isRequired,\n  fill: _propTypes2.default.string,\n  stroke: _propTypes2.default.string,\n  opacity: _propTypes2.default.number,\n  className: _propTypes2.default.string\n};\nArcPath.defaultProps = {\n  item: {\n    label: '',\n    value: 100,\n    isEmpty: true\n  },\n  total: 100,\n  angle: 0,\n  width: 500,\n  innerRadius: 0.70,\n  outerRadius: 0.90,\n  onMouseEnter: function onMouseEnter(item) {\n    return item;\n  },\n  onClick: function onClick(item) {\n    return item;\n  },\n  fill: '#e0e0e0',\n  stroke: '#e0e0e0',\n  opacity: 1,\n  className: 'donutchart-arcs-path'\n};","map":null,"metadata":{},"sourceType":"script"}